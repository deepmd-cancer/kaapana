---
- name: Start DAG upon receiving JSON
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Wait for JSON to arrive
      wait_for:
        path: /home/ubuntu/kaapana_ci/tfda-mvp1-iso-instance/tfda_mvp1_example.json
        timeout: 12000

    - name: Print message
      debug: 
        msg: "The file has arrived, moving on..."
    
    - name: Command after file arrived
      shell: echo "Hello, JSON file!" > log.txt

    - name: Display the JSON file content
      shell: cat tfda_mvp1_example.json
      register: result

    - name: Save the JSON data to a variable as a Fact
      set_fact:
        jsondata: "{{ result.stdout | from_json }}"

    - name: setDomainName
      set_fact:
        domain_name: "{{ jsondata | json_query(jmesquery) }}"
      vars:
        jmesquery: 'domain.name'

    - name: setDomainUsername
      set_fact:
        domain_username: "{{ jsondata | json_query(jmesquery) }}"
      vars:
        jmesquery: 'domain.user'

    - name: setDomainPassword
      set_fact:
        domain_password: "{{ jsondata | json_query(jmesquery) }}"
      vars:
        jmesquery: 'domain.password'

    - name: setadmin_Listenport
      set_fact:
        admin_ListenPort: "{{ jsondata | json_query(jmesquery) }}"
      vars:
        jmesquery: 'domain.admin.listenport'

    - name: Debug the values
      debug: msg=" Admin Listen Port => {{ admin_ListenPort }}, DomainName => {{ domain_name }}, DomainUserName => {{ domain_username }} , Domain Password => {{ domain_password }}"

    # - name: Spin up Vagrant Box
    #   command: vagrant up

    - name: Spin up OpenStack instance with Kaapana using python script
      command: python3 /home/ubuntu/kaapana_ci/tfda-mvp1-iso-instance/start_tfda_iso_inst_with_kaapana.py